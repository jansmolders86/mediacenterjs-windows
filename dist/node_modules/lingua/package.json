{
  "name": "lingua",
  "description": "An i18n middleware for the Express.js framework.",
  "version": "0.3.6",
  "repository": {
    "type": "git",
    "url": "git://github.com/akoenig/express-lingua.git"
  },
  "author": {
    "name": "André König",
    "email": "andre.koenig@gmail.com"
  },
  "license": "MIT",
  "main": "./lib/lingua.js",
  "directories": {
    "lib": "lib"
  },
  "dependencies": {
    "cookies": "0.3.x",
    "traverse": "0.6.x"
  },
  "engines": {
    "node": ">= 0.6.x"
  },
  "readme": "# Lingua\n\nLingua is a middleware for the Express.js framework that helps you to internationalise your webapp easily. It determines the language of the user agent and pushes the i18n resources to your views.\n\n## Installation\n\n    $ npm install lingua\n\n## Quick Start\n\nUsing lingua comes down with four simple steps:\n\n1. **Grab lingua**\n\n    ```javascript\n\n    var express = require('express'),\n        lingua  = require('lingua');\n\n    ...\n    // Express init code goes here\n    ...    \n\n    // Express app configuration code and lingua init.\n    app.configure(function() {\n        ...\n        app.set('views', __dirname + '/views');\n        app.set('view engine', 'ejs');\n\n        // Lingua configuration\n        app.use(lingua(app, {\n            defaultLocale: 'en',\n            path: __dirname + '/i18n'\n        }));\n\n        app.use(express.bodyParser());\n        app.use(express.methodOverride());\n        app.use(express.static(__dirname + '/public'));\n        app.use(app.router);\n\n        ...\n    });\n    ```\n    _Note:_ Please ensure that the call: \"app.use(app.router);\" is the last entry in your configuration section.\n\n2. **Create i18n resource files** - Note that you have to create a resource file for your default language. (In this example: './i18n/en.json' and './i18n/de-de.json').\n\n    ```javascript\n    // en.json\n        {\n            \"title\": \"Hello World\",\n            \"content\": {\n                \"description\": \"A little description.\"\n            }\n        }\n\n    // de-de.json\n        {\n            \"title\": \"Hallo Welt\",\n            \"content\": {\n                \"description\": \"Eine kleine Beschreibung.\"\n            }\n        }\n    ```\n\n3.    \n    a.  **Use lingua in your views - Static output** - Note that the syntax depends on your template engine. In this example it is: [ejs](http://embeddedjs.com/) and the request comes from a browser which sends 'en' with the HTTP request header.\n\n    ```html\n    <h1><%= lingua.title %></h1> <!-- out: <h1>Hello World</h1> -->\n    <p><%= lingua.content.description %></h1> <!-- out: <p>A little description.</p> -->\n    ```\n\n    b.  **Use lingua in your views - Dynamic output** - Sometimes it is necessary to handle dynamic data within your express route and pass it to the template. What if your i18n resource includes placeholders (\"{key}\") within a string where you can put in your dynamic data? Well, it is possible. First of all, look at this i18n resource file:\n\n    ```javascript\n    // de.json\n    {\n        \"greeting\": \"Hallo {name}. Dieser Schlüssel {code} wurde für Dich generiert.\"\n    }\n    ```\n\n    Now it is possible to transfer an object from your route into your template:\n\n    ```javascript\n    app.get('/', function(req, res) {\n        var names = ['Sarah', 'Thomas', 'Claudia'];\n\n        res.render('index', {\n            person: {\n                name: names[Math.floor(Math.random()*names.length)],\n                code: Math.round(Math.random()*100)\n            }\n        });\n    });\n    ```\n\n    And finally you can execute the i18n resource (yes, you can execute it (: ) and pass your data model to this function:\n\n    ```html\n    <p><%= lingua.greeting(person) %></p>\n    ```\n\n    _Note:_ Every i18n resource which contains placeholders like in the example above is a function after you've started the application.\n\n4.  **Let the user select a language** - Note that the user's selection is persisted within a cookie. This is an optional step. If you want to let lingua determine the user language from the browser configuration then leave this step out. Anyway, this is a very handy feature for switching the language by a user decision.\n\n    ```html\n    <a href=\"?language=de-DE\">de-DE</a>\n    <a href=\"?language=en-US\">en-US</a>\n    ```\n\n    You can configure lingua in order to change the name of this parameter.\n\n    ```javascript\n\n    // Express app configuration code and lingua init.\n    app.configure(function() {\n        ...\n\n        // Lingua configuration\n        app.use(lingua(app, {\n            defaultLocale: 'en',\n            path: __dirname + '/i18n',\n            storageKey: 'lang' // http://domain.tld/?lang=de\n        }));\n\n        ...\n    });\n    ```\n\n    The cookie lingua uses expires in one year, and includes the httpOnly flag to prevent clientside access from Javascript. You can override these settings by providing a cookieOptions key during configuration.\n\n    ```javascript\n\n    // Express app configuration code and lingua init.\n    app.configure(function() {\n        ...\n\n        // Lingua configuration\n        app.use(lingua(app, {\n            defaultLocale: 'en',\n            path: __dirname + '/i18n',\n            storageKey: 'lang', // http://domain.tld/?lang=de\n            cookieOptions: {\n                domain: '.domain.tld',    // to allow subdomains access to the same cookie, for instance\n                path: '/blog',            // to restrict the language cookie to a path\n                httpOnly: false,          // if you need access to this cookie from javascript on the client\n                expires: new Date(Date.now() + 24 * 60 * 60 * 1000),  // expire in 1 day instead of 1 year\n                secure: true              // for serving over https\n            }\n        }));\n\n        ...\n    });\n    ```\n\n    \n\n\n## Example Application\n\nThere is an example application at [./example](https://github.com/akoenig/express-lingua/tree/master/example)\n\nTo run it:\n\n    $ cd example\n    $ node app.js\n\nYou can find a deployed version of this app [here](http://express-lingua-demo.herokuapp.com).\n\n## License\n\n[MIT License](http://www.opensource.org/licenses/mit-license.php)\n\n## Author\n\nCopyright (c) 2013, [André König](http://iam.andrekoenig.info)",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/akoenig/express-lingua/issues"
  },
  "_id": "lingua@0.3.6",
  "dist": {
    "shasum": "56653d31e7f28a4b145d87a01aaeaedb2c2f68bf"
  },
  "_from": "lingua@0.3.6",
  "_resolved": "https://registry.npmjs.org/lingua/-/lingua-0.3.6.tgz"
}
